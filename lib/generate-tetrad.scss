/**
 * Generate the 'tetrad' color scheme
 *
 * @param {color} $seed Base color on which to generate the scheme
 * @return {map} $colors Map of $primary and variants for the mono scheme
 */
 
@import "generate-mono"; 
@import "generate-complementary";
 
@function generate-tetrad($seed, $distance) {
    // convert to degrees
    $distance: $distance * 90deg;
    
    $complementary-colors: generate-complementary($seed);
    $secondary-a: adjust-hue($seed, $distance);
    $secondary-b: adjust-hue(map-get($map: $complementary-colors, $key: '$complementary'), $distance);
    
    $secondary-a-colors: generate-mono($secondary-a, '$secondary-a');
    $secondary-b-colors: generate-mono($secondary-b, '$secondary-b');
    
    @return map-merge(map-merge($complementary-colors, $secondary-a-colors), $secondary-b-colors);
}