/*
sass-colorscheme-generator

inspired by http://c0bra.github.io/color-scheme-js/ (https://github.com/c0bra/color-scheme-js)

and http://colorschemedesigner.com/csd-3.5/
*/

// todo: for colorscheme tests, test with a variety of hues from color wheel
// todo: generate tests for main colorscheme() function; currently only components have tests 

@import "lib/validators";
@import "lib/generate-mono";
@import "lib/generate-complementary";
@import "lib/generate-triad";
@import "lib/generate-tetrad";
@import "lib/generate-analogic";
@import "lib/apply-variation";


@function colorscheme($seed, 
                   $global: true, 
                   $scheme: 'mono', 
                   $distance: 0.3, 
                   $variation: 'none', 
                   $complement: false) {
    
    
    // declare $colors as an empty map so it can be filled dynamically in later blocks 
    $colors: ();
    
    
    
    /* Validate variables */
    @if not validate-seed($seed) or not validate-scheme($scheme) or not validate-variation($variation) or not validate-complement($complement, $scheme) or not validate-global($global) or not validate-distance($distance, $scheme) {
        @error "Invalid input. No colors generated.";
        @return false;
    }
    
    
    /* Generate color scheme */ 
    @if $scheme == 'mono' {
        $colors: generate-mono($seed);
    } @else if $scheme == 'complementary' {
        $colors: generate-complementary($seed);
    } @else if $scheme == 'triad' {
        $colors: generate-triad($seed, $distance);
    } @else if $scheme == 'tetrad' {
        $colors: generate-tetrad($seed, $distance);
    } @else if $scheme == 'analogic' {
        $colors: generate-analogic($seed, $distance, $complement);
    }
    
    
    // todo: apply more of the variations found at http://colorschemedesigner.com/csd-3.5/
    
    /* Apply variation */
    @if $variation == 'pastel' {
        $colors: apply-variation($colors, (lighten, 10%), (desaturate, 40%));
    } @else if $variation == 'dark' {
        $colors: apply-variation($colors, (darken, 15%));
    } @else if $variation == 'light' {
        $colors: apply-variation($colors, (lighten, 15%));
    } @else if $variation == 'hard' {
        $colors: apply-variation($colors, (saturate, 100%));
    } @else if $variation == 'pale' {
        $colors: apply-variation($colors, (desaturate, 60%));
    }



    /* Set global variables from non-empty $colors keys */    
    @if $global == true {
        
        // Set $primary and variants
        @if map-has-key($colors, 'primary') {
            $primary: map-get($map: $colors, $key: 'primary') !global;
        }
        @if map-has-key($colors, 'primary--lighter') {
            $primary--lighter: map-get($map: $colors, $key: 'primary--lighter') !global;
        }
        @if map-has-key($colors, 'primary--lightest') {
            $primary--lightest: map-get($map: $colors, $key: 'primary--lightest') !global;
        }
        @if map-has-key($colors, 'primary--darker') {
            $primary--darker: map-get($map: $colors, $key: 'primary--darker') !global;
        }
        @if map-has-key($colors, 'primary--darkest') {
            $primary--darkest: map-get($map: $colors, $key: 'primary--darkest') !global;
        }
        
        // Set $secondary-a and variants
        @if map-has-key($colors, 'secondary-a') {
            $secondary-a: map-get($map: $colors, $key: 'secondary-a') !global;
        }
        @if map-has-key($colors, 'secondary-a--lighter') {
            $secondary-a--lighter: map-get($map: $colors, $key: 'secondary-a--lighter') !global;
        }
        @if map-has-key($colors, 'secondary-a--lightest') {
            $secondary-a--lightest: map-get($map: $colors, $key: 'secondary-a--lightest') !global;
        }
        @if map-has-key($colors, 'secondary-a--darker') {
            $secondary-a--darker: map-get($map: $colors, $key: 'secondary-a--darker') !global;
        }
        @if map-has-key($colors, 'secondary-a--darkest') {
            $secondary-a--darkest: map-get($map: $colors, $key: 'secondary-a--darkest') !global;
        }
        
        // Set $secondary-b and variants
        @if map-has-key($colors, 'secondary-b') {
            $secondary-b: map-get($map: $colors, $key: 'secondary-b') !global;
        }
        @if map-has-key($colors, 'secondary-b--lighter') {
            $secondary-b--lighter: map-get($map: $colors, $key: 'secondary-b--lighter') !global;
        }
        @if map-has-key($colors, 'secondary-b--lightest') {
            $secondary-b--lightest: map-get($map: $colors, $key: 'secondary-b--lightest') !global;
        }
        @if map-has-key($colors, 'secondary-b--darker') {
            $secondary-b--darker: map-get($map: $colors, $key: 'secondary-b--darker') !global;
        }
        @if map-has-key($colors, 'secondary-b--darkest') {
            $secondary-b--darkest: map-get($map: $colors, $key: 'secondary-b--darkest') !global;
        }
        
        // Set Complementary and variants
        @if map-has-key($colors, 'complementary') {
            $complementary: map-get($map: $colors, $key: 'complementary') !global;
        }
        @if map-has-key($colors, 'complementary--lighter') {
            $complementary--lighter: map-get($map: $colors, $key: 'complementary--lighter') !global;
        }
        @if map-has-key($colors, 'complementary--lightest') {
            $complementary--lightest: map-get($map: $colors, $key: 'complementary--lightest') !global;
        }
        @if map-has-key($colors, 'complementary--darker') {
            $complementary--darker: map-get($map: $colors, $key: 'complementary--darker') !global;
        }
        @if map-has-key($colors, 'complementary--darkest') {
            $complementary--darkest: map-get($map: $colors, $key: 'complementary--darkest') !global;
        }
    }
    
    $one: $primary;
    
    @return $colors;
}